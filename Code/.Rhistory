alpha = ""
) +
scale_x_continuous(breaks = seq(min(combined_data_all_per_capita$ar), max(combined_data_all_per_capita$ar), by = 2)) +
theme_minimal() + my_theme
# Display the comparison plot
print(total_comparison_plot_per_capita)
summary_data_ymis_idnadur <- oliusolutolur %>%
filter(notkunarflokkun == 'Önnur notkun')
# Filter the 'Önnur notkun' data for 'Dalvíkurbyggð' from oliusolutolur
oliusolutolur_filtered <- oliusolutolur %>%
filter(notkunarflokkun == 'Önnur notkun') %>%
group_by(ar) %>%
summarise(magn_tonn = sum(magn_tonn, na.rm = TRUE))
# Filter the data for 'Önnur notkun'
ymis_idnadur_data <- oliusolutolur %>%
filter(notkunarflokkun == 'Önnur notkun') %>%
group_by(ar) %>%
summarise(magn_tonn = sum(magn_tonn, na.rm = TRUE))
graent_bokhald_filtered <- graent_bokhald %>%
select(ar, us_flokkun, magn_tonn) %>%
group_by(ar, us_flokkun) %>%
summarise(magn_tonn = sum(magn_tonn, na.rm = TRUE))
# Filter the metin_idnadur data for sveitarfelagid
metin_idnadur_filtered <- metin_idnadur %>%
select(ar, flokkun, magn_tonn) %>%
group_by(ar, flokkun) %>%
summarise(magn_tonn = sum(magn_tonn, na.rm=TRUE))
# Combine the supplementary data
combined_supplementary_data <- bind_rows(
graent_bokhald_filtered %>% rename(category = us_flokkun),
metin_idnadur_filtered %>% rename(category = flokkun)
)
# Summarize the supplementary data by year and category
supplementary_summary <- combined_supplementary_data %>%
group_by(ar, category) %>%
summarise(total_magn_tonn = sum(magn_tonn, na.rm = TRUE))
# Summarize the total supplementary data by year
supplementary_total <- supplementary_summary %>%
group_by(ar) %>%
summarise(supplementary_magn_tonn = sum(total_magn_tonn))
# Calculate the remaining 'Önnur notkun'
remaining_data <- oliusolutolur_filtered %>%
left_join(supplementary_total, by = "ar") %>%
mutate(
other_use = magn_tonn - supplementary_magn_tonn,
category = "Önnur notkun"
) %>%
select(ar, category, other_use) %>%
rename(total_magn_tonn = other_use)
# Combine all data for plotting
plot_data <- bind_rows(
supplementary_summary,
remaining_data
)
# Create the combined plot with the reordered factor levels and the line for 'Önnur notkun'
combined_plot_ymis_idnadur <- ggplot() +
geom_col(data = supplementary_summary, aes(x = ar, y = total_magn_tonn, fill = category), position = "stack") +
geom_line(data = ymis_idnadur_data, aes(x = ar, y = magn_tonn, colour = 'Sala'), size = 1.2, show.legend = FALSE) +
geom_point(data = ymis_idnadur_data, aes(x = ar, y = magn_tonn, colour='Sala'), size = 4, show.legend = FALSE) +
scale_colour_manual(values=c('Sala' = "#DB6F5E")) +
scale_fill_manual(values = c(
'Flugvallarstarfsemi' = '#F3E5AB',
'Landbúnaður' = '#D6C241',
'Húshitun / Raforkuframleiðsla' = '#CFE8F3',
'Fiskimjölsverksmiðjur' = '#BAB89E',
'Efnaiðnaður' = '#7D7D7D',
'Eldi sjávar- og ferskvatnslífvera' = '#3498DB',
'Framleiðsla og vinnsla málma' = '#FF9F00',
'Malbikunarstöðvar' = '#E8A7A1',
'Matvæla og drykkjarvöruiðnaður' = '#16A085',
'Steinefnaiðnaður' = '#9B59B6',
'Úrgangur og efnamóttaka' = '#2980B9',
'Þauleldi' = '#8B5A2B'),
labels = function(x) str_wrap(x, width = 15)) +
labs(
title = "Önnur notkun",
#subtitle = "A Yearly Analysis",
x = "Ár",
y = "Olíusala [tonn]",
fill = "Niðurbrot",
) +
scale_x_continuous(breaks = seq(min(plot_data$ar), max(plot_data$ar), by = 2)) +
scale_y_continuous(
name = 'Olíusala [tonn]',
labels = scales::comma,
limits = c(0, 1.2*max(ymis_idnadur_data$magn_tonn)),  # Ensure y-axis starts at 0
) +
theme_minimal() + my_theme + theme(legend.position = 'right', legend.title.position = 'top', legend.box.margin = unit(0,'cm'),legend.box.spacing = unit(0,'cm'))
# Display the combined plot
print(combined_plot_ymis_idnadur)
summary_data_stacked <- oliusolutolur %>%
group_by(ar, notkunarflokkun) %>%
summarise(total_magn_tonn = sum(magn_tonn, na.rm = TRUE))
# Calculate the proportions
proportion_data <- summary_data_stacked %>%
group_by(ar) %>%
mutate(total_magn = sum(total_magn_tonn)) %>%
ungroup() %>%
mutate(proportion = total_magn_tonn / total_magn)
# Create the 100% stacked area plot
stacked_area_plot <- ggplot(proportion_data, aes(x = ar, y = proportion, fill = notkunarflokkun)) +
geom_area(position = 'fill') +
scale_y_continuous(labels = scales::percent) +
scale_x_continuous(breaks = seq(min(plot_data$ar), max(plot_data$ar), by = 2))+
labs(
title = paste('Þróun á notkun'),
x = "Year",
y = "Hlutfall notkunar",
fill = "Notkunarflokkur"
) +scale_fill_manual(values=c('Samgöngur á landi' = '#0298C1', 'Skip og bátar' = '#54A25C', 'Önnur notkun' = '#DB6F5E' )) +
theme_minimal() + my_theme
stacked_area_plot
library(tidyverse)
library(readxl)
library(openxlsx)
library(sf)
geo_data <- st_read("../Data/Raw/Iceland Geo Data.geojson")
# Making municipality/region df to add regions to it
region_data <- oil_data %>%
separate_rows(Municipality, sep = ",") %>%
select(Municipality, Region) %>%
distinct()
# making grouped municipality/ municipality df to add grouped municipality to it
municipality_groups <- oil_data %>%
select(Municipality) %>%
distinct()
split_municipality_groups <- function(df) {
df_expanded <- df %>%
# Create a new column 'Municipality_group' that copies the original 'Municipality' column
dplyr::mutate(Municipality_group = Municipality) %>%
# Enable row-wise operations so each row is processed individually
dplyr::rowwise() %>%
# Split the 'Municipality_group' string by commas into a list of individual names
dplyr::mutate(Municipality_individual = strsplit(Municipality_group, ",")) %>%
# Unnest the list column so each individual municipality gets its own row
tidyr::unnest(Municipality_individual) %>%
# Trim any leading or trailing whitespace from the individual municipality names
dplyr::mutate(Municipality_individual = trimws(Municipality_individual)) %>%
# Keep only the two relevant columns: individual names and their original group
dplyr::select(Municipality_individual, Municipality_group) %>%
# Remove row-wise grouping to return to standard data frame behavior
dplyr::ungroup()
return(df_expanded)
}
municipality_groups <- split_municipality_groups(municipality_groups) %>% rename(Municipality = Municipality_individual)
# Translating geojson variable
# names(geo_data)
geo_new <- geo_data %>%
rename(Municipality = sveitarfelag) %>%
left_join(region_data, by = "Municipality") %>%
left_join(municipality_groups, by = "Municipality")
geo_new
geo_new %>%
group_by(Region) %>%
summarise(geometry = st_union(geometry)) %>%
ungroup()
geo_new
geo_region <- geo_new %>%
group_by(Region) %>%
summarise(geometry = st_union(geometry)) %>%
ungroup()
st_write(geo_region, "../Data/Clean/geo_region.geojson", driver = "GeoJSON")
st_write(geo_region, "../Data/Clean/geo_region.geojson", driver = "GeoJSON")
geo_region
# Create region-level geometries
region_geom <- geo_data %>%
group_by(Region) %>%
summarise(geometry = st_union(geometry))
geo_data
# Create region-level geometries
region_geom <- geo_new %>%
group_by(Region) %>%
summarise(geometry = st_union(geometry))
# Join region-level geometry back to the municipality data
muni_data_region_geom <- muni_data %>%
left_join(region_geom, by = "Region", suffix = c("", "_region"))
region_geom <- geo_new %>%
group_by(Region) %>%
summarise(geometry = st_union(geometry))
# Join region-level geometry back to the municipality data
muni_data_region_geom <- geo_new %>%
left_join(region_geom, by = "Region", suffix = c("", "_region"))
region_geom <- geo_new %>%
group_by(Region) %>%
summarise(geometry = st_union(geometry))
# Join region-level geometry back to the municipality data
muni_data_region_geom <- geo_new %>%
st_join(region_geom, by = "Region", suffix = c("", "_region"))
# Replace the geometry column with region-level geometry
st_geometry(muni_data_region_geom) <- muni_data_region_geom$geometry_region
# Drop the extra geometry column
muni_data_region_geom$geometry_region <- NULL
# Save back using the same filename to keep Tableau happy
st_write(muni_data_region_geom, "../Data/Clean/Final_geo_data.geojson", delete_dsn = TRUE)
all(st_is_valid(muni_data_region_geom))  # Should return TRUE
muni_data_region_geom
all(st_is_valid(muni_data_region_geom))  # Should return TRUE
# Create region-level geometry
region_geom <- geo_new %>%
group_by(Region) %>%
summarise(geometry = st_union(geometry)) %>%
ungroup()
# Join region geometry to municipality-level rows
muni_with_region_geom <- geo_new %>%
left_join(region_geom, by = "Region", suffix = c("", "_region"))
# Create region-level geometry
region_geom <- geo_new %>%
group_by(Region) %>%
summarise(geometry = st_union(geometry)) %>%
ungroup()
# Join region geometry to municipality-level rows
muni_with_region_geom <- geo_new %>%
st_join(region_geom, by = "Region", suffix = c("", "_region"))
# Replace the geometry and ensure sf structure is preserved
st_geometry(muni_with_region_geom) <- muni_with_region_geom$geometry_region
# Drop extra column now that it's assigned
muni_with_region_geom$geometry_region <- NULL
#  Ensure it is still an sf object
class(muni_with_region_geom)
# Should show: "sf" "data.frame"
# Double-check geometry is valid
all(st_is_valid(muni_with_region_geom))  # Should be TRUE
class(muni_with_region_geom)
muni_with_region_geom <- geo_new %>%
left_join(region_geom, by = "Region", suffix = c("", "_region"))
# Step 2: Create region-level geometry (non-spatial data frame!)
region_geom <- geo_data %>%
group_by(Region) %>%
summarise(region_geom = st_union(geometry)) %>%
st_drop_geometry()  #️ Drop sf class so left_join works
region_geom <- geo_new %>%
group_by(Region) %>%
summarise(region_geom = st_union(geometry)) %>%
st_drop_geometry()  #️ Drop sf class so left_join works
# Step 3: Join region geometry back to each municipality row
muni_data_joined <- left_join(geo_new, region_geom, by = "Region")
# Step 4: Replace the geometry with the regional version
st_geometry(muni_data_joined) <- muni_data_joined$region_geom
# Step 5: Remove now-redundant region_geom column
muni_data_joined$region_geom <- NULL
# Confirm class is still sf
print(class(muni_data_joined))  # Should show "sf" and "data.frame"
# Check geometry is valid
print(all(st_is_valid(muni_data_joined)))  # Should be TRUE
geo_region <- geo_new %>%
group_by(Region) %>%
summarise(geometry = st_union(geometry)) %>%
ungroup()
library(tidyverse)
library(readxl)
library(openxlsx)
library(sf)
geo_data <- st_read("../Data/Raw/Iceland Geo Data.geojson")
# Making municipality/region df to add regions to it
region_data <- oil_data %>%
separate_rows(Municipality, sep = ",") %>%
select(Municipality, Region) %>%
distinct()
# making grouped municipality/ municipality df to add grouped municipality to it
municipality_groups <- oil_data %>%
select(Municipality) %>%
distinct()
split_municipality_groups <- function(df) {
df_expanded <- df %>%
# Create a new column 'Municipality_group' that copies the original 'Municipality' column
dplyr::mutate(Municipality_group = Municipality) %>%
# Enable row-wise operations so each row is processed individually
dplyr::rowwise() %>%
# Split the 'Municipality_group' string by commas into a list of individual names
dplyr::mutate(Municipality_individual = strsplit(Municipality_group, ",")) %>%
# Unnest the list column so each individual municipality gets its own row
tidyr::unnest(Municipality_individual) %>%
# Trim any leading or trailing whitespace from the individual municipality names
dplyr::mutate(Municipality_individual = trimws(Municipality_individual)) %>%
# Keep only the two relevant columns: individual names and their original group
dplyr::select(Municipality_individual, Municipality_group) %>%
# Remove row-wise grouping to return to standard data frame behavior
dplyr::ungroup()
return(df_expanded)
}
municipality_groups <- split_municipality_groups(municipality_groups) %>% rename(Municipality = Municipality_individual)
# Translating geojson variable
# names(geo_data)
geo_new <- geo_data %>%
rename(Municipality = sveitarfelag) %>%
left_join(region_data, by = "Municipality") %>%
left_join(municipality_groups, by = "Municipality")
# Takes geo_new and summarizes the geometry to only be on regional level
geo_region <- geo_new %>%
group_by(Region) %>%
summarise(geometry = st_union(geometry)) %>%
ungroup()
geo_region
geo_new
geo_new %>%
group_by( Municipality_group) %>%
summarise(geometry = st_union(geometry)) %>%
ungroup()
geo_munic_group <- geo_new %>%
group_by( Municipality_group) %>%
summarise(geometry = st_union(geometry)) %>%
ungroup()
geo_munic_group <- geo_new %>%
group_by( Municipality_group) %>%
summarise(geometry = st_union(geometry)) %>%
ungroup()
# Save regional geojson file
st_write(geo_region, "../Data/Clean/geo_region.geojson", driver = "GeoJSON")
# Save municipality group geojson file
st_write(geo_munic_group, "../Data/Clean/geo_munic_group.geojson", driver = "GeoJSON")
library(tidyverse)
library(readxl)
library(openxlsx)
library(sf)
# Reading in the excel sheets, created by Efla, in Icelandic.
oil_data_isl <- read_excel("../Data/Raw/Efla Data.xlsx", sheet = "oliusolutolur")
green_accounting_isl <- read_excel("../Data/Raw/Efla Data.xlsx", sheet = "combined_graent_bokhald")
metin_idnadur_isl <- read_excel("../Data/Raw/Efla Data.xlsx", sheet = "metin_notk_idnadur")
pop_munic_isl <- read_excel("../Data/Raw/Efla Data.xlsx", sheet = "ibuafjoldi_leidrett")
pop_reg_isl <- read_excel("../Data/Raw/Efla Data.xlsx", sheet = "ibufjoldi_landshlutar")
geo_data <- st_read("../Data/Raw/Iceland Geo Data.geojson")
#translating var names from isl to en and saving to new datasets
oil_data <- oil_data_isl %>%
rename(
Supply_station = Birgðastöð,
Sale_location = utsolustadur,
Postal_code = postnumer,
Municipality = sveitarfelag,
Region = landshluti,
Type = tegund,
Supertype = yfirtegund,
Sale_type = notkun,
Quantity = magn,
Quantity_tons = magn_tonn,
Year = ar,
Use_category = notkunarflokkun,
Domestic_international = innanlands_millilanda,
Comment = athugasemd,
Ship_category = skipaflokkun
)
green_accounting <- green_accounting_isl %>%
rename(
Company = fyrirtaeki,
Name = nafn,
Location = adalstadsetning,
Postal_code = postnr,
Municipality = sveitarfelag,
Region = landshluti,
Type_of_industry = tegund_idnadar,
Type_of_fuel = tegund_eldsneytis,
Supertype = yfirtegund,
Scrap_quantity = skrad_magn,
Unit = eining,
Quantity_ton = magn_tonn,
Usage = notkun,
Page = bls,
URL = url,
Year = ar,
Oil_inquiry = oliufyrirspurn,
Comment = athugasemd,
Basic_visit_oil = grunnar_visitolu,
us_classification = us_flokkun
)
measured_usage <- metin_idnadur_isl %>%
rename(
City = stadur,
Municipality = sveitarfelag,
Region = landshluti,
Fuel_type = tegund_eldsneytis,
Fuel_supertype = yfirtegund_eldsneytis,
Scrap_quantity = skrad_magn,
Unit = eining,
Quantity_ton = magn_tonn,
Year = ar,
Comment = athugasemd,
Use = flokkun
)
pop_munic <- pop_munic_isl %>%
rename(
Municipality = sveitarfelag
)
pop_reg <- pop_reg_isl %>%
rename(
Region = landshluti
)
# unique(green_accounting$Type_of_industry)
# unique(green_accounting$us_classification)
# unique(green_accounting$Usage)
#
# unique(oil_data$Use_category)
# unique(oil_data$Sale_type)
# unique(oil_data$Comment)
#
#unique(measured_usage$Use)
#Pivoting longer for population data for  matching
pop_munic <- pop_munic %>% pivot_longer(cols = 2:12, names_to = "Year", values_to = "Population_munic") %>% mutate(Year = as.integer(Year))
pop_reg <- pop_reg %>% pivot_longer(cols = 2:12, names_to = "Year", values_to = "Population_region") %>% mutate(Year = as.integer(Year))
# translating some values
oil_data <- oil_data  %>%
mutate(Use_category_eng = case_when(
Use_category == "Samgöngur á landi" ~ "Land transport",
Use_category == "Flug" ~ "Flights",
Use_category == "Skip og bátar" ~ "Ships and boats",
Use_category == "Önnur notkun" ~ "Other uses",
TRUE ~ Use_category  # fallback to original if no match
))
green_accounting <- green_accounting %>%
mutate(us_class_eng = case_when(
us_classification ==  "Fiskimjölsverksmiðjur" ~ "Fishmeal plants",
us_classification ==  "Úrgangur og efnamóttaka" ~ "Waste and chemical reception",
us_classification ==  "Eldi sjávar- og ferskvatnslífvera" ~ "Marine and freshwater aquaculture",
us_classification ==  "Framleiðsla og vinnsla málma" ~ "Metal production and processing",
us_classification ==  "Malbikunarstöðvar" ~ "Asphalt plants",
us_classification ==  "Efnaiðnaður" ~ "Chemical industry",
us_classification ==  "Steinefnaiðnaður" ~ "Mineral industry",
us_classification ==  "Matvæla og drykkjarvöruiðnaður" ~ "Food and beverage industry",
us_classification ==  "Þauleldi" ~ "Sustainable farming",
TRUE ~ us_classification  # fallback to original if no match
) )
measured_usage <- measured_usage  %>%
mutate(Use_eng = case_when(
Use == "Landbúnaður" ~ "Agriculture",
Use == "Húshitun / Raforkuframleiðsla" ~ "Domestic Heating / Power Generation",
Use == "Flugvallarstarfsemi" ~ "Airport Operations",
TRUE ~ Use  # fallback to original if no match
))
# Making year an integer
oil_data <- oil_data %>% mutate(Year = as.integer(Year))
green_accounting <- green_accounting %>% mutate(Year = as.integer(Year))
measured_usage <- measured_usage %>% mutate(Year = as.integer(Year))
# Joins
# Oil data to pop
#region
oil_data <- left_join(oil_data, pop_reg, by=c("Region", "Year"))
#municipality
oil_data <- left_join(oil_data, pop_munic, by=c("Municipality", "Year"))
# Combine the supplementary data
# Filter out columns in both that are not needed for joining, fix names, and bind the datasets
supplementary_data <- bind_rows(
green_accounting %>%
select(Municipality, Region, Type_of_fuel, Supertype, Quantity_ton, Year, us_classification, us_class_eng) %>%
rename(
Fuel_type = Type_of_fuel,
Fuel_supertype = Supertype,
Use = us_classification,
Use_eng = us_class_eng),
measured_usage %>%
select(Municipality, Region, Fuel_type, Fuel_supertype, Quantity_ton,
Year, Use, Use_eng) ) %>%
mutate(Year = as.integer(Year))
## checking
# nrow(supplementary_data)
# nrow(green_accounting_isl) + nrow(metin_idnadur_isl)
oil_data_mapping <- oil_data %>% separate_rows(Municipality, sep = ",")
unique(oil_data_mapping$Municipality)
municipality_mapping <- oil_data %>%
distinct(Municipality) %>%
mutate(Municipality = str_trim(Municipality)) %>%
mutate(Individual_Municipality = str_split(Municipality, ","))  # list column
oil_data_with_list <- oil_data %>%
left_join(municipality_mapping, by = "Municipality")
oil_data_tableau <- oil_data_with_list %>%
unnest(Individual_Municipality)
# Making municipality/region df to add regions to it
region_data <- oil_data %>%
separate_rows(Municipality, sep = ",") %>%
select(Municipality, Region) %>%
distinct()
# making grouped municipality/ municipality df to add grouped municipality to it
municipality_groups <- oil_data %>%
select(Municipality) %>%
distinct()
split_municipality_groups <- function(df) {
df_expanded <- df %>%
# Create a new column 'Municipality_group' that copies the original 'Municipality' column
dplyr::mutate(Municipality_group = Municipality) %>%
# Enable row-wise operations so each row is processed individually
dplyr::rowwise() %>%
# Split the 'Municipality_group' string by commas into a list of individual names
dplyr::mutate(Municipality_individual = strsplit(Municipality_group, ",")) %>%
# Unnest the list column so each individual municipality gets its own row
tidyr::unnest(Municipality_individual) %>%
# Trim any leading or trailing whitespace from the individual municipality names
dplyr::mutate(Municipality_individual = trimws(Municipality_individual)) %>%
# Keep only the two relevant columns: individual names and their original group
dplyr::select(Municipality_individual, Municipality_group) %>%
# Remove row-wise grouping to return to standard data frame behavior
dplyr::ungroup()
return(df_expanded)
}
municipality_groups <- split_municipality_groups(municipality_groups) %>% rename(Municipality = Municipality_individual)
# Translating geojson variable
# names(geo_data)
geo_new <- geo_data %>%
rename(Municipality = sveitarfelag) %>%
left_join(region_data, by = "Municipality") %>%
left_join(municipality_groups, by = "Municipality")
# Takes geo_new and summarizes the geometry to only be on regional level
geo_region <- geo_new %>%
group_by(Region) %>%
summarise(geometry = st_union(geometry)) %>%
ungroup()
# Takes geo_new and summarizes the geometry to only be on municipality *group* level
geo_munic_group <- geo_new %>%
group_by( Municipality_group) %>%
summarise(geometry = st_union(geometry)) %>%
ungroup()
oil_data
oil_data %>%
summarize(range(Postal_code))
oil_data %>%
summarize(range(Quantity_tons))
