axis.text.x = element_text(angle = 45, hjust = 1, size=8),
axis.text.y = element_text(size = 8)
)
# Define the color mapping for each 'landsvaedi'
color_mapping <- c(
'Suðurland' = "#0298C1",
'Austurland' = "#54A25C",
'Norðurland Eystra' = "#DB6F5E",
'Norðurland Vestra' = "#9B59B6",
'Vestfirðir' = "#BAB89E",
'Vesturland' = "#335966",
'Suðurnes' = "#E8A7A1",
'Höfuðborgarsvæðið' = "#D6C241"
)
combined_data <- oliusolutolur %>%
group_by(ar, notkunarflokkun, landshluti) %>%
summarise(total_magn_tonn = sum(magn_tonn, na.rm = TRUE)) %>%
ungroup()
plots_notkunarflokkar <- combined_data %>%
split(.$notkunarflokkun) %>%
lapply(function(data) {
ggplot(data, aes(x = ar, y = total_magn_tonn, color = landshluti)) +
geom_line(size = 1.2, show.legend = FALSE) +
geom_point(size = 3, show.legend = FALSE) +
scale_y_continuous(
name = "Olíusala [tonn]",
labels = scales::comma,
limits = c(0, 1.2*max(data$total_magn_tonn, na.rm = TRUE))
) +
scale_color_manual(values = color_mapping) +  # Apply color mapping
labs(
title = unique(data$notkunarflokkun),
x = "Ár",
color = "Landshluti"
) +
scale_x_continuous(breaks = seq(min(data$ar), max(data$ar), by = 2)) +
theme_minimal() + my_theme
})
summary_data_all <- oliusolutolur %>%
group_by(ar, landshluti) %>%
summarise(total_magn_tonn = sum(magn_tonn, na.rm = TRUE))
total_comparison_plot <- ggplot(summary_data_all, aes(x = ar, y = total_magn_tonn, color = landshluti)) +
geom_line(size = 1.2, show.legend = FALSE) +
geom_point(size = 3, show.legend = FALSE) +
scale_y_continuous(
name = 'Olíusala [tonn]',
labels = scales::comma,
limits = c(0, 1.2*max(summary_data_all$total_magn_tonn, na.rm = TRUE))
) +
scale_color_manual(values = color_mapping) +  # Apply color mapping
labs(
title = "Heild",
x = "Ár",
color = "Landshluti"
) +
scale_x_continuous(breaks = seq(min(summary_data_all$ar), max(summary_data_all$ar), by = 2)) +
theme_minimal() + my_theme
# Grof_total_per_capita ---------------------------------------------------
ibuafjoldi_long <- ibuafjoldi_landshlutar %>%
pivot_longer(cols = -landshluti, names_to = "ar", values_to = "population") %>%
mutate(ar = as.numeric(ar))
combined_data_all_per_capita <- summary_data_all %>%
left_join(ibuafjoldi_long, by = c("ar", "landshluti")) %>%
mutate(
magn_tonn_per_capita = total_magn_tonn / population
)
total_comparison_plot_per_capita <- ggplot(combined_data_all_per_capita, aes(x = ar, y = magn_tonn_per_capita, color = landshluti)) +
geom_line(size = 1.2, show.legend = FALSE) +
geom_point(size = 3, show.legend = TRUE) +
scale_y_continuous(
name = "Olíusala per höfðatölu [tonn]",
labels = scales::comma,
limits = c(0, 1.5*max(combined_data_all_per_capita$magn_tonn_per_capita, na.rm = TRUE))
) +
scale_color_manual(values = color_mapping) +  # Apply color mapping
labs(
title = "Olíusala per Höfðatölu",
x = "Ár",
color = "Landshluti"
) +
scale_x_continuous(breaks = seq(min(combined_data_all_per_capita$ar), max(combined_data_all_per_capita$ar), by = 2)) +
theme_minimal() + my_theme
# Grid --------------------------------------------------------------------
layout <- rbind( c(1, 1),
c(2, 3),
c(4,5))
grid.arrange(total_comparison_plot_per_capita,
plots_notkunarflokkar[[1]],
plots_notkunarflokkar[[2]],
plots_notkunarflokkar[[3]],
total_comparison_plot,
nrow = 3, top = 'Landshlutar',
layout_matrix = layout)
dev.off()
grid.arrange(total_comparison_plot_per_capita,
plots_notkunarflokkar[[1]],
plots_notkunarflokkar[[2]],
plots_notkunarflokkar[[3]],
total_comparison_plot,
nrow = 3, top = 'Landshlutar',
layout_matrix = layout)
total_comparison_plot_per_capita
ibuafjoldi_long <- ibuafjoldi %>%
pivot_longer(cols = -sveitarfelag, names_to = "ar", values_to = "population") %>%
mutate(ar = as.numeric(ar))
# Summarize the data across all categories
summary_data_all_per_capita <- oliusolutolur %>%
group_by(ar) %>%
summarise(total_magn_tonn = sum(magn_tonn, na.rm = TRUE))
# Combine sveitarfelagid and total data across all categories
combined_data_all_per_capita <- summary_data_all %>%
rename(landid_magn_tonn = total_magn_tonn)
# Join with population data
combined_data_all_per_capita <- combined_data_all_per_capita %>%
left_join(ibuafjoldi_long %>% filter(sveitarfelag == "Total"), by = "ar") %>%
rename(total_population = population)
# Check for NA values and handle them
combined_data_all_per_capita <- combined_data_all_per_capita %>%
filter(!is.na(landid_magn_tonn) & !is.na(total_population)) %>%
mutate(
total_magn_tonn_per_capita = landid_magn_tonn / total_population
)
# Create the comparison plot without scaling factor and secondary y-axis
total_comparison_plot_per_capita <- ggplot(combined_data_all_per_capita, aes(x = ar)) +
geom_line(aes(y = total_magn_tonn_per_capita), size = 1.2, color='#335966') +
geom_point(aes(y = total_magn_tonn_per_capita), size = 3, color='#335966') +
scale_y_continuous(
name = "Olíusala per höfðatölu [tonn]",
labels = scales::comma,
limits = c(0,1.2*max(combined_data_all_per_capita$total_magn_tonn_per_capita))  # Ensure y-axis starts at 0
) +
labs(
#title = "Annual Sum of magn_tonn per capita for sveitarfelag and Total (All Categories)",
#subtitle = "A Yearly Analysis of magn_tonn per capita",
x = "Ár",
alpha = ""
) +
scale_x_continuous(breaks = seq(min(combined_data_all_per_capita$ar), max(combined_data_all_per_capita$ar), by = 2)) +
theme_minimal() + my_theme
# Display the comparison plot
print(total_comparison_plot_per_capita)
oliusolutolur <- oliusolutolur_med_flugi %>%
filter(notkunarflokkun != 'Flug')
my_theme <- theme(
plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.title.x = element_text(size = 7, face = "bold"),
axis.title.y = element_text(size = 7, face = "bold"),
axis.text = element_text(size = 10),
panel.grid.major = element_line(color = "gray80"),
panel.grid.minor = element_line(color = "gray90"),
legend.key.width = unit(0.25, "cm"), # Adjusts the width of the legend keys
legend.key.height = unit(0.4, 'cm'),
legend.text = element_text(size = 7), # Adjusts the size of the legend text
axis.text.x = element_text(angle = 45, hjust = 1, size=8),
axis.text.y = element_text(size = 8),
panel.grid.major.x = element_blank(),  # Remove major gridlines
panel.grid.minor.x = element_blank(),  # Remove minor gridlines
panel.grid.minor.y = element_blank()  # Remove minor gridlines
)
colors <- c("#0298C1", "#54A25C", "#DB6F5E", "#D6C241", "#BAB89E")
combined_data <- na.omit(combined_data)
summary_data <- oliusolutolur %>%
group_by(ar, notkunarflokkun) %>%
summarise(total_magn_tonn = sum(magn_tonn, na.rm = TRUE))
# Combine 'sveitarfelagid' and total data
combined_data <- summary_data %>%
rename(landid_magn_tonn = total_magn_tonn)
combined_data <- na.omit(combined_data)
ibuafjoldi_long <- ibuafjoldi %>%
pivot_longer(cols = -sveitarfelag, names_to = "ar", values_to = "population") %>%
mutate(ar = as.numeric(ar))
# Summarize the data across all categories
summary_data_all_per_capita <- oliusolutolur %>%
group_by(ar) %>%
summarise(total_magn_tonn = sum(magn_tonn, na.rm = TRUE))
# Combine sveitarfelagid and total data across all categories
combined_data_all_per_capita <- summary_data_all %>%
rename(landid_magn_tonn = total_magn_tonn)
# Join with population data
combined_data_all_per_capita <- combined_data_all_per_capita %>%
left_join(ibuafjoldi_long %>% filter(sveitarfelag == "Total"), by = "ar") %>%
rename(total_population = population)
# Check for NA values and handle them
combined_data_all_per_capita <- combined_data_all_per_capita %>%
filter(!is.na(landid_magn_tonn) & !is.na(total_population)) %>%
mutate(
total_magn_tonn_per_capita = landid_magn_tonn / total_population
)
# Create the comparison plot without scaling factor and secondary y-axis
total_comparison_plot_per_capita <- ggplot(combined_data_all_per_capita, aes(x = ar)) +
geom_line(aes(y = total_magn_tonn_per_capita), size = 1.2, color='#335966') +
geom_point(aes(y = total_magn_tonn_per_capita), size = 3, color='#335966') +
scale_y_continuous(
name = "Olíusala per höfðatölu [tonn]",
labels = scales::comma,
limits = c(0,1.2*max(combined_data_all_per_capita$total_magn_tonn_per_capita))  # Ensure y-axis starts at 0
) +
labs(
#title = "Annual Sum of magn_tonn per capita for sveitarfelag and Total (All Categories)",
#subtitle = "A Yearly Analysis of magn_tonn per capita",
x = "Ár",
alpha = ""
) +
scale_x_continuous(breaks = seq(min(combined_data_all_per_capita$ar), max(combined_data_all_per_capita$ar), by = 2)) +
theme_minimal() + my_theme
# Display the comparison plot
print(total_comparison_plot_per_capita)
summary_data_ymis_idnadur <- oliusolutolur %>%
filter(notkunarflokkun == 'Önnur notkun')
# Filter the 'Önnur notkun' data for 'Dalvíkurbyggð' from oliusolutolur
oliusolutolur_filtered <- oliusolutolur %>%
filter(notkunarflokkun == 'Önnur notkun') %>%
group_by(ar) %>%
summarise(magn_tonn = sum(magn_tonn, na.rm = TRUE))
# Filter the data for 'Önnur notkun'
ymis_idnadur_data <- oliusolutolur %>%
filter(notkunarflokkun == 'Önnur notkun') %>%
group_by(ar) %>%
summarise(magn_tonn = sum(magn_tonn, na.rm = TRUE))
graent_bokhald_filtered <- graent_bokhald %>%
select(ar, us_flokkun, magn_tonn) %>%
group_by(ar, us_flokkun) %>%
summarise(magn_tonn = sum(magn_tonn, na.rm = TRUE))
# Filter the metin_idnadur data for sveitarfelagid
metin_idnadur_filtered <- metin_idnadur %>%
select(ar, flokkun, magn_tonn) %>%
group_by(ar, flokkun) %>%
summarise(magn_tonn = sum(magn_tonn, na.rm=TRUE))
# Combine the supplementary data
combined_supplementary_data <- bind_rows(
graent_bokhald_filtered %>% rename(category = us_flokkun),
metin_idnadur_filtered %>% rename(category = flokkun)
)
# Summarize the supplementary data by year and category
supplementary_summary <- combined_supplementary_data %>%
group_by(ar, category) %>%
summarise(total_magn_tonn = sum(magn_tonn, na.rm = TRUE))
# Summarize the total supplementary data by year
supplementary_total <- supplementary_summary %>%
group_by(ar) %>%
summarise(supplementary_magn_tonn = sum(total_magn_tonn))
# Calculate the remaining 'Önnur notkun'
remaining_data <- oliusolutolur_filtered %>%
left_join(supplementary_total, by = "ar") %>%
mutate(
other_use = magn_tonn - supplementary_magn_tonn,
category = "Önnur notkun"
) %>%
select(ar, category, other_use) %>%
rename(total_magn_tonn = other_use)
# Combine all data for plotting
plot_data <- bind_rows(
supplementary_summary,
remaining_data
)
# Create the combined plot with the reordered factor levels and the line for 'Önnur notkun'
combined_plot_ymis_idnadur <- ggplot() +
geom_col(data = supplementary_summary, aes(x = ar, y = total_magn_tonn, fill = category), position = "stack") +
geom_line(data = ymis_idnadur_data, aes(x = ar, y = magn_tonn, colour = 'Sala'), size = 1.2, show.legend = FALSE) +
geom_point(data = ymis_idnadur_data, aes(x = ar, y = magn_tonn, colour='Sala'), size = 4, show.legend = FALSE) +
scale_colour_manual(values=c('Sala' = "#DB6F5E")) +
scale_fill_manual(values = c(
'Flugvallarstarfsemi' = '#F3E5AB',
'Landbúnaður' = '#D6C241',
'Húshitun / Raforkuframleiðsla' = '#CFE8F3',
'Fiskimjölsverksmiðjur' = '#BAB89E',
'Efnaiðnaður' = '#7D7D7D',
'Eldi sjávar- og ferskvatnslífvera' = '#3498DB',
'Framleiðsla og vinnsla málma' = '#FF9F00',
'Malbikunarstöðvar' = '#E8A7A1',
'Matvæla og drykkjarvöruiðnaður' = '#16A085',
'Steinefnaiðnaður' = '#9B59B6',
'Úrgangur og efnamóttaka' = '#2980B9',
'Þauleldi' = '#8B5A2B'),
labels = function(x) str_wrap(x, width = 15)) +
labs(
title = "Önnur notkun",
#subtitle = "A Yearly Analysis",
x = "Ár",
y = "Olíusala [tonn]",
fill = "Niðurbrot",
) +
scale_x_continuous(breaks = seq(min(plot_data$ar), max(plot_data$ar), by = 2)) +
scale_y_continuous(
name = 'Olíusala [tonn]',
labels = scales::comma,
limits = c(0, 1.2*max(ymis_idnadur_data$magn_tonn)),  # Ensure y-axis starts at 0
) +
theme_minimal() + my_theme + theme(legend.position = 'right', legend.title.position = 'top', legend.box.margin = unit(0,'cm'),legend.box.spacing = unit(0,'cm'))
# Display the combined plot
print(combined_plot_ymis_idnadur)
summary_data_stacked <- oliusolutolur %>%
group_by(ar, notkunarflokkun) %>%
summarise(total_magn_tonn = sum(magn_tonn, na.rm = TRUE))
# Calculate the proportions
proportion_data <- summary_data_stacked %>%
group_by(ar) %>%
mutate(total_magn = sum(total_magn_tonn)) %>%
ungroup() %>%
mutate(proportion = total_magn_tonn / total_magn)
# Create the 100% stacked area plot
stacked_area_plot <- ggplot(proportion_data, aes(x = ar, y = proportion, fill = notkunarflokkun)) +
geom_area(position = 'fill') +
scale_y_continuous(labels = scales::percent) +
scale_x_continuous(breaks = seq(min(plot_data$ar), max(plot_data$ar), by = 2))+
labs(
title = paste('Þróun á notkun'),
x = "Year",
y = "Hlutfall notkunar",
fill = "Notkunarflokkur"
) +scale_fill_manual(values=c('Samgöngur á landi' = '#0298C1', 'Skip og bátar' = '#54A25C', 'Önnur notkun' = '#DB6F5E' )) +
theme_minimal() + my_theme
stacked_area_plot
library(tidyverse)
library(readxl)
library(openxlsx)
library(sf)
geo_data <- st_read("../Data/Raw/Iceland Geo Data.geojson")
# Making municipality/region df to add regions to it
region_data <- oil_data %>%
separate_rows(Municipality, sep = ",") %>%
select(Municipality, Region) %>%
distinct()
# making grouped municipality/ municipality df to add grouped municipality to it
municipality_groups <- oil_data %>%
select(Municipality) %>%
distinct()
split_municipality_groups <- function(df) {
df_expanded <- df %>%
# Create a new column 'Municipality_group' that copies the original 'Municipality' column
dplyr::mutate(Municipality_group = Municipality) %>%
# Enable row-wise operations so each row is processed individually
dplyr::rowwise() %>%
# Split the 'Municipality_group' string by commas into a list of individual names
dplyr::mutate(Municipality_individual = strsplit(Municipality_group, ",")) %>%
# Unnest the list column so each individual municipality gets its own row
tidyr::unnest(Municipality_individual) %>%
# Trim any leading or trailing whitespace from the individual municipality names
dplyr::mutate(Municipality_individual = trimws(Municipality_individual)) %>%
# Keep only the two relevant columns: individual names and their original group
dplyr::select(Municipality_individual, Municipality_group) %>%
# Remove row-wise grouping to return to standard data frame behavior
dplyr::ungroup()
return(df_expanded)
}
municipality_groups <- split_municipality_groups(municipality_groups) %>% rename(Municipality = Municipality_individual)
# Translating geojson variable
# names(geo_data)
geo_new <- geo_data %>%
rename(Municipality = sveitarfelag) %>%
left_join(region_data, by = "Municipality") %>%
left_join(municipality_groups, by = "Municipality")
geo_new
geo_new %>%
group_by(Region) %>%
summarise(geometry = st_union(geometry)) %>%
ungroup()
geo_new
geo_region <- geo_new %>%
group_by(Region) %>%
summarise(geometry = st_union(geometry)) %>%
ungroup()
st_write(geo_region, "../Data/Clean/geo_region.geojson", driver = "GeoJSON")
st_write(geo_region, "../Data/Clean/geo_region.geojson", driver = "GeoJSON")
geo_region
# Create region-level geometries
region_geom <- geo_data %>%
group_by(Region) %>%
summarise(geometry = st_union(geometry))
geo_data
# Create region-level geometries
region_geom <- geo_new %>%
group_by(Region) %>%
summarise(geometry = st_union(geometry))
# Join region-level geometry back to the municipality data
muni_data_region_geom <- muni_data %>%
left_join(region_geom, by = "Region", suffix = c("", "_region"))
region_geom <- geo_new %>%
group_by(Region) %>%
summarise(geometry = st_union(geometry))
# Join region-level geometry back to the municipality data
muni_data_region_geom <- geo_new %>%
left_join(region_geom, by = "Region", suffix = c("", "_region"))
region_geom <- geo_new %>%
group_by(Region) %>%
summarise(geometry = st_union(geometry))
# Join region-level geometry back to the municipality data
muni_data_region_geom <- geo_new %>%
st_join(region_geom, by = "Region", suffix = c("", "_region"))
# Replace the geometry column with region-level geometry
st_geometry(muni_data_region_geom) <- muni_data_region_geom$geometry_region
# Drop the extra geometry column
muni_data_region_geom$geometry_region <- NULL
# Save back using the same filename to keep Tableau happy
st_write(muni_data_region_geom, "../Data/Clean/Final_geo_data.geojson", delete_dsn = TRUE)
all(st_is_valid(muni_data_region_geom))  # Should return TRUE
muni_data_region_geom
all(st_is_valid(muni_data_region_geom))  # Should return TRUE
# Create region-level geometry
region_geom <- geo_new %>%
group_by(Region) %>%
summarise(geometry = st_union(geometry)) %>%
ungroup()
# Join region geometry to municipality-level rows
muni_with_region_geom <- geo_new %>%
left_join(region_geom, by = "Region", suffix = c("", "_region"))
# Create region-level geometry
region_geom <- geo_new %>%
group_by(Region) %>%
summarise(geometry = st_union(geometry)) %>%
ungroup()
# Join region geometry to municipality-level rows
muni_with_region_geom <- geo_new %>%
st_join(region_geom, by = "Region", suffix = c("", "_region"))
# Replace the geometry and ensure sf structure is preserved
st_geometry(muni_with_region_geom) <- muni_with_region_geom$geometry_region
# Drop extra column now that it's assigned
muni_with_region_geom$geometry_region <- NULL
#  Ensure it is still an sf object
class(muni_with_region_geom)
# Should show: "sf" "data.frame"
# Double-check geometry is valid
all(st_is_valid(muni_with_region_geom))  # Should be TRUE
class(muni_with_region_geom)
muni_with_region_geom <- geo_new %>%
left_join(region_geom, by = "Region", suffix = c("", "_region"))
# Step 2: Create region-level geometry (non-spatial data frame!)
region_geom <- geo_data %>%
group_by(Region) %>%
summarise(region_geom = st_union(geometry)) %>%
st_drop_geometry()  #️ Drop sf class so left_join works
region_geom <- geo_new %>%
group_by(Region) %>%
summarise(region_geom = st_union(geometry)) %>%
st_drop_geometry()  #️ Drop sf class so left_join works
# Step 3: Join region geometry back to each municipality row
muni_data_joined <- left_join(geo_new, region_geom, by = "Region")
# Step 4: Replace the geometry with the regional version
st_geometry(muni_data_joined) <- muni_data_joined$region_geom
# Step 5: Remove now-redundant region_geom column
muni_data_joined$region_geom <- NULL
# Confirm class is still sf
print(class(muni_data_joined))  # Should show "sf" and "data.frame"
# Check geometry is valid
print(all(st_is_valid(muni_data_joined)))  # Should be TRUE
geo_region <- geo_new %>%
group_by(Region) %>%
summarise(geometry = st_union(geometry)) %>%
ungroup()
library(tidyverse)
library(readxl)
library(openxlsx)
library(sf)
geo_data <- st_read("../Data/Raw/Iceland Geo Data.geojson")
# Making municipality/region df to add regions to it
region_data <- oil_data %>%
separate_rows(Municipality, sep = ",") %>%
select(Municipality, Region) %>%
distinct()
# making grouped municipality/ municipality df to add grouped municipality to it
municipality_groups <- oil_data %>%
select(Municipality) %>%
distinct()
split_municipality_groups <- function(df) {
df_expanded <- df %>%
# Create a new column 'Municipality_group' that copies the original 'Municipality' column
dplyr::mutate(Municipality_group = Municipality) %>%
# Enable row-wise operations so each row is processed individually
dplyr::rowwise() %>%
# Split the 'Municipality_group' string by commas into a list of individual names
dplyr::mutate(Municipality_individual = strsplit(Municipality_group, ",")) %>%
# Unnest the list column so each individual municipality gets its own row
tidyr::unnest(Municipality_individual) %>%
# Trim any leading or trailing whitespace from the individual municipality names
dplyr::mutate(Municipality_individual = trimws(Municipality_individual)) %>%
# Keep only the two relevant columns: individual names and their original group
dplyr::select(Municipality_individual, Municipality_group) %>%
# Remove row-wise grouping to return to standard data frame behavior
dplyr::ungroup()
return(df_expanded)
}
municipality_groups <- split_municipality_groups(municipality_groups) %>% rename(Municipality = Municipality_individual)
# Translating geojson variable
# names(geo_data)
geo_new <- geo_data %>%
rename(Municipality = sveitarfelag) %>%
left_join(region_data, by = "Municipality") %>%
left_join(municipality_groups, by = "Municipality")
# Takes geo_new and summarizes the geometry to only be on regional level
geo_region <- geo_new %>%
group_by(Region) %>%
summarise(geometry = st_union(geometry)) %>%
ungroup()
geo_region
geo_new
geo_new %>%
group_by( Municipality_group) %>%
summarise(geometry = st_union(geometry)) %>%
ungroup()
geo_munic_group <- geo_new %>%
group_by( Municipality_group) %>%
summarise(geometry = st_union(geometry)) %>%
ungroup()
geo_munic_group <- geo_new %>%
group_by( Municipality_group) %>%
summarise(geometry = st_union(geometry)) %>%
ungroup()
# Save regional geojson file
st_write(geo_region, "../Data/Clean/geo_region.geojson", driver = "GeoJSON")
# Save municipality group geojson file
st_write(geo_munic_group, "../Data/Clean/geo_munic_group.geojson", driver = "GeoJSON")
